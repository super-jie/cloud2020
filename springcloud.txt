什么是微服务
	微服务是一种架构模式，将单一程序划分成一组小的服务，服务之间互相协调、互相配合，服务与服务之间采用轻量级的通信机制互相协作(通常基于http协议的RESTful API)。

服务注册中心
	Eureka
        服务治理：
            管理服务与服务之间的依赖关系，实现服务调用、负载均衡、容错和服务发现和注册。

        服务注册与发现：
            服务注册，就是将提供某个服务的模块信息(通常是这个服务的ip和端口)注册到1个公共的组件上去。
            服务发现，就是新注册的这个服务模块能够及时的被其他调用者发现。不管是服务新增和服务删减都能实现自动发现。
            Eureka Server作为服务注册的服务器，它就是服务中心，其他微服务使用Eureka客户端连接到Eureka服务端，并维持心跳连接

        Eureka两个组件：
            Eureka Server和Eureka Client
            Eureka Server提供服务注册
            Eureka Client：用于简化Eureka Server的交互，同时具备一个内置的使用轮询负载算法的负载均衡器。

        应用启动后Eureka Client会向Eureka Server发送心跳连接。
        如果Eureka Server在多个周期内没有接收到节点发来的心跳连接，将会从服务列表中把该节点删除。

        创建集群后，要在RestTemplate的bean上加上@LoadBalanced来达到负载均衡.

        服务发现：
            要在主启动类上加上@EnableDiscoveryClient注解。该注解用于获取注册中心上的服务。



	Nacos

	Zookeeper ×

	Consul ×
	
	
服务调用
	Ribbon
	    提供客户端的负载均衡算法和服务调用。在创建RestTemplate的方法上加上@LoadBalanced注解,即可使用.

	    Ribbon的自定义规则不可以放在ComponentScan的包扫描路径中
	        放在启动类下，会被共享成为全局的配置。就造成了所有访问url的规则都共享一个rule了

	    调用自己配置的轮询算法(前提不能放在启动类的包下)：
	        创建一个配置类，创建一个算法对象放到容器中。
	        在启动类上配置@RibbonClient(name = "CLOUD-PAYMENT-SERVICE",configuration = MyselfRule.class)注解
	            name是放在注册中心的服务名称，configuration配置的就是自己创建的配置类。这样就是单独为这个服务配置轮询算法。

	    手写轮询算法：
	        1.获取注册中心的服务集群。
	        2.通过访问次数除以集群中服务总数取余，把余数当做服务集群下标来获取集群中其中一个服务
	            2.1访问次数通过自旋锁来获取。
	        3.获取到服务后，获取到服务的uri，加上要访问的控制器路径即可。

	    几种轮询算法：
	        1、轮询法
	            将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。

	        2、随机法
	            通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。
	            由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，
	            也就是轮询的结果。

	        3、源地址哈希法
	            源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，
	            得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，
	            它每次都会映射到同一台后端服务器进行访问。

	        4、加权轮询法
	            不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。
	            给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，
	            降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。

	        5、加权随机法
	            与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。
	            不同的是，它是按照权重随机请求后端服务器，而非顺序。

	        6、最小连接数法
	            最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前。
                积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。

	openFeign
	    Feign是一个声明式的web服务客户端，让编写web服务客户端变得非常容易，只需创建一个接口并在接口上添加注解即可.
	    可以理解为ribbon+RestTemplate的整合.
	    无需创建RestTemplate的整合对象,只需要在客户端创建一个service层接口,在启动类上加上@EnableFeignClients注解.
	    接口使用@FeignClient(value = "CLOUD-PAYMENT-SERVICE")注解,因为openfeign支持springmvc注解,
	    所以接口里的方法可以使用@GetMapping()等注解,路径就是服务端controller中对应方法的路径.

	    openFeign怎么更换负载均衡算法
	        OpenFeign也是默认使用了负载均衡组件Ribbon，所以直接设置Ribbon的负载均衡策略.
	        在启动类上添加@RibbonClient注解，可以覆盖掉默认的策略，name为服务名称，configuration为自己创建的配置类

	    超时控制
	        在yml文件中配置连接和读取时间


	Feign ×
	    与openFeign区别,openFeign可以支持springMVC

	LoadBalancer ×

服务降级
	Hystrix
	    雪崩效应:
	        多个为服务之间调用的时候,假设A调用B,B调用C,C调用D,这就是所谓的"扇出".
	        如果扇出的链路上某个微服务的调用响应时间过长或者不可用,对A的调用就会占用越来越多的系统资源,进而引起系统崩溃,这就是雪崩效应.
	    雪崩:一个模块下的某个实例失败后,这个模块依旧就收流量,然后这个有问题的模块还调用了其他模块,这样就发生次级联故障(雪崩)

	    Hystrix是什么:
	        是用于处理分布式系统的延迟和容错,在分布式系统里,许多依赖不可避免的会调用失败,比如超时异常等.
	        Hystrix能够保证在一个依赖出问题的情况下,不会导致整体服务失败,避免级联故障,以提高分布式系统的弹性.

	    断路器:
	        本身是一种开关装置,当某个服务发生故障之后,通过断路器的故障监控,向调用方返回一个符合预期的可处理的备选响应(fallback)
	        而不是长时间的等待或者直接抛出异常.这样就可以保证服务调用方不会被长时间占用,从而导致雪崩.

	    服务降级fallback
	        发生降级的几种情况:
	            程序运行异常
	            超时
	            服务熔断触发服务降级
	            线程池满了也会导致服务降级

	        实现服务降级:
	            1.在启动类上添加@EnableCircuitBreaker注解,启动hystrix.
	            2.在要实现服务降级的方法上添加@HystrixCommand注解,fallbackMethod属性填写回调方法名

	        一个类统一实现服务降级处理,通过以下方法可以实现该类中所有方法使用同一个服务降级处理方法:
	            1.在方法上添加@HystrixCommand注解,不写fallbackMethod属性
	            2.在方法的类上添加@DefaultProperties(defaultFallback = "方法名")注解

	        通过feign接口的方式实现服务降级:
	            1.创建一个类实现服务接口,实现方法,将类注入到容器.
	            2.在接口@FeignClient注解上,添加fallback属性,fallback = PaymentFallbackService.class.
	            3.在配置类中添加feign.hystrix.enabled: true,开启feign的服务降级


	    服务熔断break
	        熔断机制的注解是@HystrixCommand.

	        熔断机制是应对雪崩效应的一种微服务链路保护机制.
	        当扇出链路的某个服务出错不可调用,会进行服务降级,进而熔断该节点微服务的调用,快速的返回错误的响应信息.
	        当检测到该节点微服务调用响应正常后,回复链路的调用.

	        在@HystrixCommand注解中,配置属性commandProperties中的@HystrixProperty注解
	        @HystrixProperty(name = "circuitBreaker.enabled",value = "true"),//是否开启断路器
            @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value = "10"),//请求次数
            @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "10000"),//时间范围
            @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage",value = "60"),//失败率达到多少后跳闸

	        总结:
	            在一定的时间内,请求次数达到一定数量
	                若失败率达到设定的阈值,则断路器会开启,后续的访问则不会调用主逻辑,而是直接调用服务降级的方法.
	                休眠时间窗到期后,断路器会变成半开状态,允许一部分访问请求访问,若访问成则断路器关闭,否则断路器继续保持开启状态,休眠时间窗重新计时.


	    服务限流flowlimit:见Alibaba sentinel
	Alibaba sentinel
	
服务网关
	gateway

服务配置
	Nacos

服务总线
	Nacos